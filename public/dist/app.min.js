angular.module("Retrospection",["ui.router","btford.socket-io","ngAnimate","ngCookies"]),angular.module("Retrospection").controller("ActionItem",["$scope","$stateParams","AuthenticationService","ActionItemService","Socket","sprintDetails","teamMembers","actionItemsList",function(t,e,n,r,s,o,i,a){"use strict";t.authentication=n,t.actionItemsList=a.data,t.newActionItem={},t.actionItemNullError="",t.actionItemOwnerError="",t.teamMembers=i.data,t.isOwner=n.hasSprintAuthorization(o.data),t.addActionItem=function(){return t.newActionItem.title&&t.newActionItem.title.trim().length?t.newActionItem.owner?(t.newActionItem.owner=t.newActionItem.owner.email,t.newActionItem.sprint=e.sprintId,void r.saveActionItem(t.newActionItem).success(function(e){t.newActionItem={}})):void(t.actionItemOwnerError="Please select an owner for the action item"):void(t.actionItemNullError="Action Item can't be null")},s.on("actionItem.added",function(){r.getActionItemsBySprint(e.sprintId).success(function(e){t.actionItemsList=e})}),t.removeActionItem=function(t){r.deleteActionItem(t).success(function(t){})},t.updateActionItems=function(t){t.status=!t.status,r.updateActionItem(t).success(function(t){})}}]),angular.module("Retrospection").controller("Authentication",["$scope","AuthenticationService","$state","$cookies","teams","$rootScope",function(t,e,n,r,s,o){"use strict";t.user={},t.authentication=e,t.teams=s.data,t.authentication.user&&n.go("profile"),o.$on("unauthorized",function(){e.user=null,n.go("signin")}),t.login=function(r){r&&e.login(t.user).success(function(e){e.user?(t.authentication.user=e.user,n.go("profile")):t.errorMessage=e.errorMsg})},t.signup=function(r){r&&e.signup(t.user).success(function(e){e.user?(t.authentication.user=e.user,n.go("profile")):t.errorMessage=e.errorMsg})}}]),angular.module("Retrospection").controller("Comments",["$scope","$stateParams","$state","$location","CommentsService","AuthenticationService",function(t,e,n,r,s,o){"use strict";t.listPosComments=[],t.listNegComments=[],t.newPosComment="",t.newNegComment="",t.isError=!1,t.errorMessage="",t.authentication=o,t.addToPosList=function(){var e=t.newPosComment.trim();e.length&&(t.listPosComments.push(e),t.newPosComment="",t.isError=t.isError&&!(t.listPosComments.length&&t.listNegComments.length))},t.addToNegList=function(){var e=t.newNegComment.trim();e.length&&(t.listNegComments.push(e),t.newNegComment="",t.isError=t.isError&&!(t.listPosComments.length&&t.listNegComments.length))},t.removeFromPos=function(e){t.listPosComments.splice(t.listPosComments.indexOf(e),1)},t.removeFromNeg=function(e){t.listNegComments.splice(t.listNegComments.indexOf(e),1)},t.submitComments=function(){if(0===t.listPosComments.length||0===t.listNegComments.length)return t.isError=!0,void(t.errorMessage="Please enter atleast one comment in both Positive and Negative section");var r={};r.positives=t.listPosComments,r.negatives=t.listNegComments,r.sprintId=e.sprintId,r.owner=t.authentication.user,s.submitComments(r).success(function(t){n.go("summaryView",{sprintId:e.sprintId})})}}]),angular.module("Retrospection").controller("Header",["$scope","AuthenticationService","$cookies","$state",function(t,e,n,r){"use strict";t.authentication=e,t.logout=function(){e.logout().success(function(){t.authentication.user=null,n.putObject("user",null),r.go("home")})}}]),angular.module("Retrospection").controller("PasswordHandler",["$scope","$state","AuthenticationService","tokenValidation",function(t,e,n,r){"use strict";t.resetRequestUserEmail="",t.resetRequestSuccessStatus="",t.resetRequestErrorStatus="",t.newPassword={},t.errorMessage="",t.isValidToken=r?r.data.isValid:!1,t.userId=r?r.data.userId:null,t.resetRequest=function(e){t.resetRequestErrorStatus="",t.resetRequestSuccessStatus="",e&&n.submitResetRequest(t.resetRequestUserEmail).success(function(e){e.success?t.resetRequestSuccessStatus="Weâ€™ve sent you an email "+t.resetRequestUserEmail+"containing a link that will allow you to reset your password for the next 24 hours.":t.resetRequestErrorStatus=e.errorMsg})},t.updatePassword=function(r){if(r){if(t.newPassword.value!==t.newPassword.confirmValue)return void(t.errorMessage="Both passwords should match");n.updatePassword(t.newPassword,t.userId).then(function(t){t.data.success&&e.go("signin")})}}}]),angular.module("Retrospection").controller("Profile",["AuthenticationService","Socket","ActionItemService","sprintData","actionItemsList","$scope","teamMembers",function(t,e,n,r,s,o,i){"use strict";o.latestSprint=r.data[0],o.actionItemsList=s.data,o.teamMembers=i,o.authentication=t,e.on("actionItem.added",function(){console.log("team is "+o.authentication.user.team),n.getActionItemsByUser(o.authentication.user.email).success(function(t){console.log("Data from ActionItemService"+t),o.actionItemsList=t})}),o.updateActionItems=function(t){t.status=!t.status,n.updateActionItem(t).success(function(t){console.log(t)})}}]),angular.module("Retrospection").controller("Sprint",["$scope","$state","SprintService","AuthenticationService","sprintData",function(t,e,n,r,s){"use strict";t.authentication=r,t.sprint={},t.isError=!1,t.errorMessage="Sprint name can't be null",t.sprintData=s.data,t.createSprint=function(){var r=t.sprint.title;return r&&r.trim().length?(t.sprint.team=t.authentication.user.team,t.sprint.owner=t.authentication.user._id,void n.createSprint(t.sprint).success(function(t){e.go("addComments",{sprintId:t._id})})):void(t.isError=!0)}}]),angular.module("Retrospection").controller("Summary",["$scope","$state","$stateParams","CommentsService","Socket","AuthenticationService","comments","sprintDetails","teamMembers","isLoggedIn",function(t,e,n,r,s,o,i,a,u,c){"use strict";function m(){for(var e=0;e<t.comments.length;e++)for(var n=0;n<t.teamMembers.length;n++)t.teamMembers[n]._id===t.comments[e].owner&&(t.teamMembers[n].added=1)}t.teamMembers=u.data,t.authentication=o,t.comments=i.data,m(),t.isOwner=o.hasSprintAuthorization(a.data),s.on("comments.added",function(){r.getRetroComments(n.sprintId).success(function(e){t.comments=e,m()})}),t.removeCommentPositives=function(t,e){t.positives.splice(t.positives.indexOf(e),1),r.updateRetroComments(t)},t.removeCommentNegatives=function(t,e){t.negatives.splice(t.negatives.indexOf(e),1),r.updateRetroComments(t)},t.approveComments=function(){r.updateRetroCommentsBatch(t.comments)}}]),angular.module("Retrospection").config(["$httpProvider",function(t){"use strict";t.interceptors.push("Interceptor")}]),angular.module("Retrospection").config(["$stateProvider",function(t){"use strict";t.state("home",{url:"/",templateUrl:"views/home.html"}).state("profile",{url:"/main",resolve:{isLoggedIn:["AuthenticationService",function(t){return t.isLoggedIn()}],sprintData:["SprintService","isLoggedIn",function(t,e){return t.loadSprintsData(e.team)}],actionItemsList:["isLoggedIn","ActionItemService",function(t,e){return e.getActionItemsByUser(t.email)}],teamMembers:["AuthenticationService","isLoggedIn",function(t,e){return t.getSprintTeamMembers(e.team)}]},templateUrl:"views/user/profile.html",controller:"Profile"}).state("signup",{url:"/signup",resolve:{teams:["AuthenticationService",function(t){return t.getTeamsList()}]},templateUrl:"views/user/signup.html",controller:"Authentication"}).state("signin",{url:"/signin",resolve:{teams:["AuthenticationService",function(t){return t.getTeamsList()}]},templateUrl:"views/user/signin.html",controller:"Authentication"}).state("resetPasswordRequest",{url:"/resetpassword",resolve:{tokenValidation:function(){return null}},templateUrl:"views/user/password_reset.html",controller:"PasswordHandler"}).state("resetPasswordConfirm",{url:"/resetpassword/:resetToken",resolve:{tokenValidation:["AuthenticationService","$stateParams",function(t,e){return t.confirmResetRequest(e.resetToken)}]},templateUrl:"views/user/password_update.html",controller:"PasswordHandler"}).state("createSprint",{url:"/create",resolve:{isLoggedIn:["AuthenticationService",function(t){return t.isLoggedIn()}],sprintData:function(){return[]}},templateUrl:"views/sprint/create_sprint.html",controller:"Sprint"}).state("addComments",{url:"/:sprintId/comments",resolve:{isLoggedIn:["AuthenticationService",function(t){return t.isLoggedIn()}]},templateUrl:"views/sprint/add_comments.html"}).state("sprintView",{url:"/sprints",resolve:{isLoggedIn:["AuthenticationService",function(t){return t.isLoggedIn()}],sprintData:["SprintService","isLoggedIn",function(t,e){return t.loadSprintsData(e.team)}]},templateUrl:"views/sprint/show_sprints.html",controller:"Sprint"}).state("summaryView",{url:"/sprints/:sprintId",resolve:{isLoggedIn:["AuthenticationService",function(t){return t.isLoggedIn()}],comments:["$stateParams","CommentsService",function(t,e){return e.getRetroComments(t.sprintId)}],sprintDetails:["$stateParams","SprintService",function(t,e){return e.getSprintDetail(t.sprintId)}],teamMembers:["$stateParams","AuthenticationService","sprintDetails",function(t,e,n){return e.getSprintTeamMembers(n.data.team)}],actionItemsList:["$stateParams","ActionItemService",function(t,e){return e.getActionItemsBySprint(t.sprintId)}]},views:{"":{templateUrl:"views/sprint/summary_view.html"},"comments@summaryView":{templateUrl:"views/sprint/summary_view_comments.html",controller:"Summary"},"actionItems@summaryView":{templateUrl:"views/sprint/summary_view_action_items.html",controller:"ActionItem"}}}).state("errorView",{url:"/errorView",templateUrl:"views/error_view.html"})}]),angular.module("Retrospection").factory("ActionItemService",["$http",function(t){"use strict";var e={};return e.saveActionItem=function(e){return t.post("/actions",e)},e.getActionItemsBySprint=function(e){return t.get("/actions/sprint/"+e)},e.getActionItemsByUser=function(e){return t.get("/actions/user/"+e)},e.deleteActionItem=function(e){return t["delete"]("/actions/"+e._id)},e.updateActionItem=function(e){return t.put("/actions/"+e._id,e)},e}]),angular.module("Retrospection").factory("AuthenticationService",["$cookies","$http","SprintService","$q","$state",function(t,e,n,r,s){"use strict";var o={};return o.user=null,o.isLoggedIn=function(){var t=r.defer();return o.user?(t.resolve(o.user),t.promise):(e.get("/isLoggedIn").success(function(e){o.user=e,o.user?t.resolve(o.user):(t.reject(null),s.go("signin"))}),t.promise)},o.login=function(t){return e.post("/auth/login",t)},o.signup=function(t){return e.post("/auth/signup",t)},o.logout=function(){return e.get("/auth/logout")},o.hasSprintAuthorization=function(t){return t.owner==o.user._id?!0:!1},o.getSprintTeamMembers=function(t){return e.get("/users/"+t)},o.submitResetRequest=function(t){return e.get("/resetpassword/user/"+t)},o.confirmResetRequest=function(t){return e.get("/resetpassword/"+t)},o.updatePassword=function(t,n){return e.put("/users/"+n,t)},o.getTeamsList=function(){return e.get("/teams")},o}]),angular.module("Retrospection").factory("CommentsService",["$http",function(t){"use strict";var e={};return e.submitComments=function(e){return t.post("/comments",e)},e.getRetroComments=function(e){return t.get("/"+e+"/comments")},e.updateRetroComments=function(e){t.put("/comments/"+e._id,e)},e.updateRetroCommentsBatch=function(e){var n;for(n in e)t.put("/comments/"+e[n]._id,e[n])},e}]),angular.module("Retrospection").factory("Interceptor",["$q","$injector","$rootScope",function(t,e,n){"use strict";var r={};return r.responseError=function(r){switch(r.status){case 401:n.$broadcast("unauthorized"),e.get("$state").transitionTo("signin");break;case 400:e.get("$state").transitionTo("errorView")}return t.reject(r)},r}]),angular.module("Retrospection").factory("Socket",["socketFactory","$location",function(t,e){"use strict";return t({prefix:"",ioSocket:io.connect(e.protocol()+"://"+e.host()+":"+e.port())})}]),angular.module("Retrospection").factory("SprintService",["$http",function(t){"use strict";var e={};return e.createSprint=function(e){return t.post("/sprint",e)},e.loadSprintsData=function(e){return t.get("/sprint/team/"+e)},e.getSprintDetail=function(e){return t.get("/sprint/"+e)},e}]);